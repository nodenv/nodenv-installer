#!/usr/bin/env bash
# Usage: nodenv doctor
# Summary: Detects common problems in nodenv installation

set -e
[ -n "$NODENV_DEBUG" ] && { export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '; set -x; }

indent() {
  sed 's/^/  /'
}

printc() {
  local color_name="color_$1"
  local fmt="$2"
  shift 2

  if [[ $fmt == *"\n" ]]; then
    fmt="${!color_name}${fmt%\\n}${color_reset}\n"
  else
    fmt="${!color_name}${fmt}${color_reset}"
  fi

  # shellcheck disable=SC2059
  printf "$fmt" "$@"
}

if [ -t 1 ]; then
  color_red=$'\e[31m'
  color_green=$'\e[32m'
  color_yellow=$'\e[1;33m'
  color_bright=$'\e[1;37m'
  color_reset=$'\e[0m'
else
  # shellcheck disable=SC2034
  color_red=""
  # shellcheck disable=SC2034
  color_green=""
  # shellcheck disable=SC2034
  color_yellow=""
  # shellcheck disable=SC2034
  color_bright=""
  # shellcheck disable=SC2034
  color_reset=""
fi

warnings=0

if [ "$(uname -s)" = Darwin ]; then
  bashrc=".bash_profile"
else
  bashrc=".bashrc"
fi

echo -n "Checking for \`nodenv' in PATH: "
num_locations="$(type -aP nodenv | uniq | wc -l)"
if [ "$num_locations" -eq 0 ]; then
  printc red "not found\n"
  { if [ -x "$HOME/.nodenv/bin/nodenv" ] || [ -x "${NODENV_ROOT:-}/bin/nodenv" ]; then
      [ -x "$HOME/.nodenv/bin/nodenv" ] &&
        echo "You seem to have nodenv installed in \`$HOME/.nodenv/bin',"
      [ -x "${NODENV_ROOT:-}/bin/nodenv" ] &&
        echo "You seem to have nodenv installed in \`$NODENV_ROOT/bin',"
      echo "but that directory is not present in PATH."
      echo "Please add it to PATH by configuring your "
      echo "\`~/${bashrc}', \`~/.zshrc', or \`~/.config/fish/config.fish'."
    else
      echo "Please refer to https://github.com/nodenv/nodenv#installation"
    fi
  } | indent

  if [ -n "$(find "${NODENV_ROOT:-~/.nodenv}/bin/nodenv" -mmin 1 2>/dev/null)" ]; then
    printc bright "Recent installation detected.\n"
    { echo "Complete the installation by configuring your PATH as above,"
      echo "and re-run nodenv-doctor in a fresh shell."
    } | indent
    exit 0
  fi

  exit 1
elif [ "$num_locations" -eq 1 ]; then
  printc green "%s\n" "$(type -P nodenv)"
else
  printc yellow "multiple\n"
  { echo "You seem to have multiple nodenv installs in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    type -aP nodenv
  } | indent
  echo
  : $((warnings++))
fi

NODENV_ROOT="${NODENV_ROOT:-$(nodenv root)}"

IFS=: read -ra path <<< "$PATH"

echo -n "Checking for nodenv shims in PATH: "
shims_dir="${NODENV_ROOT}/shims"
found=""
for dir in "${path[@]}"; do [ "$dir" != "$shims_dir" ] || found=true; done
if [ -n "$found" ]; then
  printc green "OK\n"
else
  printc red "not found\n"
  { echo "The directory \`$shims_dir' must be present in PATH for nodenv to work."
    echo "Please run \`nodenv init' and follow the instructions."
  } | indent
  echo
  : $((warnings++))
fi

echo -n "Checking \`nodenv install' support: "
nodenv_installs="$({ ls "$NODENV_ROOT"/plugins/*/bin/nodenv-install 2>/dev/null || true
                    type -aP nodenv-install 2>/dev/null || true
                  } | uniq)"
num_installs="$(wc -l <<<"$nodenv_installs")"
if [ -z "$nodenv_installs" ]; then
  printc red "not found\n"
  { echo "Unless you plan to add Node versions manually, you should install node-build."
    echo "Please refer to https://github.com/nodenv/node-build#installation"
  }
  echo
  : $((warnings++))
elif [ "$num_installs" -eq 1 ]; then
  printc green "$nodenv_installs"
  if [[ $nodenv_installs == "$NODENV_ROOT"/plugins/* ]]; then
    nodenv_install_cmd="${nodenv_installs##*/}"
    nodenv_install_version="$(nodenv "${nodenv_install_cmd#nodenv-}" --version || true)"
  else
    nodenv_install_version="$("$nodenv_installs" --version || true)"
  fi
  printf " (%s)\n" "$nodenv_install_version"
else
  printc yellow "multiple\n"
  { echo "You seem to have multiple \`nodenv-install' in the following locations."
    echo "Please pick just one installation and remove the others."
    echo
    echo "$nodenv_installs"
  } | indent
  echo
  : $((warnings++))
fi

echo -n "Counting installed Node versions: "
num_nodes="$(nodenv versions --bare | wc -l)"
if [ "$num_nodes" -eq 0 ]; then
  printc yellow "none\n"
  echo "There aren't any Node versions installed under \`$NODENV_ROOT/versions'." | indent
  [ "$num_installs" -eq 0 ] || {
    latest_version="$(nodenv install -l 2>/dev/null | grep -vFe - | tail -1)"
    [ -n "$latest_version" ] || latest_version="<version>"
    echo -n "You can install Node versions like so: "
    printc bright "nodenv install $latest_version\n"
  } | indent
else
  printc green "%d versions\n" "$num_nodes"
fi

echo -n "Auditing installed plugins: "
plugin_broken=0
while IFS='' read -r hook; do
  plugin_name=
  message=

  if [ -n "$plugin_name" ]; then
    [ "$((plugin_broken++))" -gt 0 ] || printc yellow "warning\n"
    { printc bright "$plugin_name"
      echo " $message"
      echo "  (found in \`${hook}')"
    } | indent
    : $((warnings++))
  fi
done < <(nodenv hooks exec)

[ "$plugin_broken" -gt 0 ] || printc green "OK\n"

[ $warnings -eq 0 ]
